# -*- coding: utf-8 -*-
"""cancer tumor prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10B56wo5KrZ-am_d2npaVCefuSver7NCM
"""

#import libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os.path
import tensorflow as tf

#load the data
#M stands for malignant has cancer
#B stands for benign has not cancer
from google.colab import files
uploaded = files .upload()
df = pd.read_csv('Tumor Cancer Prediction_Data (1).csv')
df.head(455)

#count the number of cells
df.shape

#count the number of empty values in columns
df.isna().sum()

#drop the column with missing value
df=df.dropna(axis=1)

df.shape

#get the count of diagnosis [M] or [B]
df['diagnosis'].value_counts()

#visulize the count
sns.countplot(df['diagnosis'],label='count')

#what is the data type
df.dtypes

#encode the categorical data values
from sklearn.preprocessing import LabelEncoder
labelencoder_y=LabelEncoder()
df.iloc[:,31]=labelencoder_y.fit_transform(df.iloc[:,31].values)

#create a pair plot
sns.pairplot(df.iloc[:,29:32],hue='diagnosis')

#print first 5 rows
df.head(5)

#get the coorelation of the columns
df.iloc[:,1:32].corr()

#visualize the correlation
plt.figure(figsize=(10,10))
sns.heatmap(df.iloc[:,22:32].corr(),annot=True,fmt='.0%')

# split the data
x=df.iloc[:,0:31].values
y=df.iloc[:,31].values

#split the data into 75% training and 25% testing
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=0)

#scale the data (feature scaling)
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x_train=sc.fit_transform(x_train)
x_test=sc.fit_transform(x_test)

import pickle
#create a function for the models
def models(x_train,y_train):

 #logistic regression

 from sklearn.linear_model import LogisticRegression
 log = LogisticRegression(random_state=0)
 log.fit(x_train,y_train)


 #descision tree
 from sklearn .tree import DecisionTreeClassifier
 tree=DecisionTreeClassifier(criterion= 'entropy',random_state=0)
 tree.fit(x_train,y_train)


 #random forest
 from sklearn.ensemble import RandomForestClassifier
 forest=RandomForestClassifier(n_estimators= 10,criterion='entropy',random_state=0)
 forest.fit(x_train,y_train)




 #print models
 print('[0]Logistic Regression Training Accuracy:',log.score(x_train,y_train))
 print('[1]Decision Tree Classifier Training Accuracy:',tree.score(x_train,y_train))
 print('[2]Random Forest Classifier Training Accuracy:',forest.score(x_train,y_train))

 return log ,tree,forest

# getting all of the models
model=models(x_train,y_train)

#test model accuracy on test data on confusion matrix
from sklearn.metrics import confusion_matrix

for i in range(len(model)):
  print('Model',i)
  cm =confusion_matrix(y_test,model[i].predict(x_test))

  TP = cm[0][0]
  TN = cm[1][1]
  FN = cm[1][0]
  FP = cm[0][1]

  print (cm)
  print('Testing Accuracy = ',(TP + TN)/(TP +TN +FN +FP))
  print()

#Show another way to get metrics of the models
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
for i in range(len(model)):
  print('Model',i)
  print (classification_report(y_test,model[i].predict(x_test)))
  print( accuracy_score(y_test,model[i].predict(x_test)))
  print()

#print the prediction of random forest model
pred=model[2].predict(x_test)
print(pred)
print()
print(y_test)

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import VotingClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn .tree import DecisionTreeClassifier

log = LogisticRegression(random_state=0)
forest=RandomForestClassifier(n_estimators= 10,criterion='entropy',random_state=0)
tree=DecisionTreeClassifier(criterion= 'entropy',random_state=0)


VotingClassifierModel=VotingClassifier(estimators=[('logistic regression', log),('Random Forest',forest),('Decision tree',tree)],voting='hard')
VotingClassifierModel.fit(x_train,y_train)
print('VotingClassifierModel Train Score is : ',VotingClassifierModel.score(x_train,y_train))
print('VotingClassifierModel Test Score is : ',VotingClassifierModel.score(x_test,y_test))

y_pred=VotingClassifierModel.predict(x_test)
print('predicted value for VotingClassifierModel is :',y_pred[:10])
print('tested value for VotingClassifierModel is :',y_test[:10])

CMatrix = confusion_matrix(y_test , y_pred)
print('Confusion Matrix is : \n' , CMatrix)

#drawing confusion matrix
sns.heatmap(CMatrix , center = True)
plt.show()